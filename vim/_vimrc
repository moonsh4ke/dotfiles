set nocompatible " Enable vim functionality

" --------------------------------
" |Plugins|
" --------------------------------

call plug#begin()

" GUI

"Plug 'https://github.com/morhetz/gruvbox' " Colortheme
Plug 'https://github.com/itchyny/lightline.vim' " Configurable statusline
Plug 'https://github.com/mhinz/vim-startify' " Start screen
" ---------------------------------

" File management 

Plug 'https://github.com/preservim/nerdtree' " File explorer
" --------------------------------

" Syntax highlight

Plug 'https://github.com/luochen1990/rainbow' " Rainbow parentheses
Plug 'https://github.com/wlangstroth/vim-racket' " Racket support
Plug 'https://github.com/vim-python/python-syntax' " Python
Plug 'https://github.com/plasticboy/vim-markdown'
" --------------------------------

" Text manipulation
Plug 'https://github.com/tpope/vim-surround' " Easy management for sorroundings
Plug 'https://github.com/machakann/vim-highlightedyank'
Plug 'https://github.com/Yggdroot/indentLine' " Display the identation levelvs with thin vertical lines
Plug 'https://github.com/tpope/vim-commentary' " Comment stuff out

Plug 'https://github.com/easymotion/vim-easymotion' " Fastest motion management
Plug 'https://github.com/haya14busa/incsearch.vim' " Enhancement for incsearch a.k.a '/'
Plug 'https://github.com/haya14busa/incsearch-easymotion.vim'

Plug 'https://github.com/godlygeek/tabular' " Text aligment
" --------------------------------

" Git

Plug 'https://github.com/tpope/vim-fugitive' " Git interface
Plug 'https://github.com/airblade/vim-gitgutter' " Asynchronous git diff
" Plug 'https://github.com/xuyuanp/nerdtree-git-plugin' " Show status of files in NerdTree
" --------------------------------

" Misc enhancements and functionalities

Plug 'https://github.com/vim-scripts/BufOnly.vim' " Close all buffers but not the one opened
Plug 'https://github.com/mbbill/undotree'
Plug 'https://github.com/tpope/vim-obsession' " Session management
" --------------------------------
"

Plug 'https://github.com/vimwiki/vimwiki'

call plug#end()

" Plug justify text macro (h 25.3)
packadd justify


" --------------------------------
" |Setters & Vim configuration|
" --------------------------------

" Basic

syntax on
set number " Show line numbers.
set relativenumber " Show relative line numbering
set hidden " Allow hide unsaved buffers
set noerrorbells visualbell t_vb= " Disable audible bell because it's annoying.
set mouse+=a " Enable mouse support
set scrolloff=12        " Keep cursor in approximately the middle of the screen
set guioptions-=T " Remove toolbar
"set inccommand=nosplit " Live preview of substituion
set timeout timeoutlen=1000 ttimeoutlen=100 " fix slow O inserts
set whichwrap=h,l " If the end or the beggining of a line is reached keep moving to the previous/next line
" filetype indent on      " load filetype-specific indent files
" filetype plugin on      " load filetype specific plugin files
" --------------------------------

" Gui

set shortmess+=I " Disable the default Vim startup message.
set laststatus=2 " Always show the status line at the bottom, even if you only have one window open.
set noshowmode " Get rid of built-in mode text because of lightline plugin
" --------------------------------

" Searching


set hlsearch " Highlight all search patterns after
set ignorecase " Case-insensitive search
set smartcase " The search becomes case-sensitive if it contains any capital letters.
set incsearch " Enable searching as you type rather than waiting til you press enter.
" --------------------------------

" Text

set formatoptions=crqj
" set textwidth=150

" use 4 spaces instead of tabs during formatting
set expandtab
set tabstop=4
set shiftwidth=4
set softtabstop=4

set showmatch           " highlight matching [{()}]
" --------------------------------

" Backup 

"set backup " Enable backup files
"set writebackup " Backup after :w, so if :w fails doesn't lose pre :w file
"
"set backupdir=~/.config/nvim/backups/,~/.config/nvim/backups/backups2/
"set backupext=.bak " Backup extension
" --------------------------------

" Swapfiles

" set swapfile " Enable swapfiles
" set updatetime=300 " Amount of time to save swap files (miliseconds)
"set directory=. " Save swapfile in the same dir of the buffer

" --------------------------------

" Undo

set undolevels=5000 " Increase undo size
set undofile " Maintain undo history between sessions
set undodir=$HOME/vimfiles/undodir
" --------------------------------

" Command mode completion

set wildignorecase " Case insensitive when completing file names and directories.
set wildmenu            " Visual autocomplete for command menu
set wildignore=*.png,*.jpg,*.gif " Extensions to ignore
" --------------------------------

" Backspace

set backspace=indent " Backspace de-indent
set backspace+=eol " Backspace over eol to join lines
set backspace+=start " Allow erase more text than you entered during a single insert command
" --------------------------------

" Windows

" Open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright

" --------------------------------
" |Abbreviations|
" --------------------------------

ab ##s --------------------------------

" --------------------------------
" |Autocommands|
" --------------------------------

" Remember cursor position when re opening a file
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
endif

" highlight current line, but only in active window
augroup CursorLineOnlyInActiveWindow
    autocmd!
    autocmd VimEnter,WinEnter,BufWinEnter * setlocal cursorline
    autocmd WinLeave * setlocal nocursorline
augroup END

" --------------------------------
" |Custom Hotkeys|
" --------------------------------
"
" Wordwise Ctrl-Y in insert mode
noremap! <M-y> <Esc>klyWjpa
noremap! <M-e> <Esc>jlyWkpa

nnoremap <M-+> <C-a>
nnoremap <M--> <C-x>

nnoremap <M-d> 0D

nmap Q <Nop> " 'Q' in normal mode enters Ex mode. You almost never want this.

" Todo: Change more Ctrl keys

" " Select all
nnoremap <C-a> ggVG 

" Jump to start and end of line using the home row keys
map H ^
map L $

" quicker window movement
nnoremap <C-j> <C-w>j
nnoremap <C-h> <C-w>h
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Move by line
nnoremap j gj
nnoremap k gk

" Anwkward keys for LA layout
nnoremap <C-}> <C-]>
nnoremap ° ^

" More intuitive enter behavior (add line without entering in insert mode)
nmap <CR> o<Esc>
" Search results centered please
nnoremap <silent> n nzz
nnoremap <silent> N Nzz
nnoremap <silent> * *zz
nnoremap <silent> # #zz
nnoremap <silent> g* g*zz
nnoremap <C-o> <C-o>zz
nnoremap <C-i> <C-i>zz

" (Shift)Tab (de)indents code
vnoremap <Tab> >
vnoremap <S-Tab> <


" --------------------------------
" |Leader Shorcuts|
" --------------------------------

let mapleader=" "       " leader is space

" Quick quit
nmap <Leader>q :q<CR>
nmap <leader>b :bd<CR>
nmap <Leader>w :w<CR>
nmap <Leader>wq :wq<CR>
" todo: shotcut to w and wq

" Quick copy paste
nmap <Leader>y "+y
nmap <Leader>d "+d
vmap <Leader>y "+y
vmap <Leader>d "+d
nmap <Leader>p "+p
nmap <Leader>P "+P
vmap <Leader>p "+p
vmap <Leader>P "+P

"  <Space>  --  <leader><leader> toggles between buffers
nnoremap <Leader>a <c-^>
" --------------------------------

" <gruvbox> - tema pulento

" Deal with term colors
"if exists('+termguicolors')
"  let &t_8f="\<Esc>[38;2;%lu;%lu;%lum"
"  let &t_8b="\<Esc>[48;2;%lu;%lu;%lum"
"  set termguicolors
"endif
"
"let g:gruvbox_sign_column='bg0' " Sign Column same color as background
"let g:gruvbox_contrast_dark = 'hard'
"let g:gruvbox_invert_selection='0' " Proper visual mode selection color
"let g:gruvbox_italic=1
"colorscheme gruvbox
"set background=dark

" --------------------------------

" <nerdtree>

nnoremap <Leader>n :NERDTreeToggle<CR>
nnoremap <Leader>N :NERDTreeFind<CR>
" Close vim if only window left is NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" Disable signcolumn for NERDTree
autocmd FileType nerdtree setlocal signcolumn=no

" Disables display of the 'Bookmarks' label and
" 'Press ? for help' text.
let NERDTreeMinimalUI=1

" Display hidden files
let NERDTreeShowHidden=1

" Show line number in nerdtree
let NERDTreeShowLineNumbers=1

" Close tree after open a file
let NERDTreeQuitOnOpen = 1

" Automatically delete the buffer of the file you just deleted with NerdTree:
let NERDTreeAutoDeleteBuffer = 1

" Colors
" TODO: update help menu colors

" Files
hi NerdTreeFile guifg=#458788
hi NERDTreeExecFile guifg=#98971a
hi NERDTreeLinkFile guifg=#d79921
hi NERDTreeLinkTarget guifg=#d79921

" Directories
hi NERDTreeDirSlash guifg=#d65d0e
hi NERDTreeDir guifg=#a89984
hi NERDTreeOpenable guifg=#a89984
hi NERDTreeClosable guifg=#a89984
hi NERDTreeFlags guifg=#a89984

" --------------------------------

" <easymotion>

map <Leader> <Plug>(easymotion-prefix)
" Use uppercase target labels and type as a lower case
let g:EasyMotion_use_upper = 1
let g:EasyMotion_keys = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ;'
" JK motions: Line motions
map <Leader>t <Plug>(easymotion-t2)

map <Leader>h <Plug>(easymotion-linebackward)
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)
map <Leader>l <Plug>(easymotion-lineforward)
map <Leader>s <Plug>(easymotion-s)

" --------------------------------

" <rainbow parentheses>

" Setup colors and exclude nertree because it cause conflict with devicons
" with NERDTree
let g:rainbow_conf = {
  \    'guifgs': ['#d65d0e', '#d3869b', '#458588', '#d79921', '#8ec07c', '#cc241d'],
  \    'separately': {
  \       'nerdtree': 0,
  \       'vimwiki' : 0
  \    }
  \}

let g:rainbow_active = 1

" --------------------------------

" <vim-cool>

let g:CoolTotalMatches = 1
" --------------------------------

" <coc>

""Give more space for displaying messages.
"set cmdheight=1

"" Some servers have issues with backup files, see #649.
"" https://github.com/neoclide/coc.nvim/issues/649
"" set nobackup
"" set nowritebackup

"" Don't pass messages to |ins-completion-menu|.
"set shortmess+=c

"" Always show the signcolumn, otherwise it would shift the text each time
"" diagnostics appear/become resolved.
"if has("patch-8.1.1564")
"  " Recently vim can merge signcolumn and number column into one
"  set signcolumn=number
"else
"  set signcolumn=yes
"endif

"" Use K to show documentation in preview window.
"nnoremap <silent> K :call <SID>show_documentation()<CR>


"function! s:show_documentation()
"  if (index(['vim','help'], &filetype) >= 0)
"    execute 'h '.expand('<cword>')
"  else
"    call CocAction('doHover')
"  endif
"endfunction

"" Use tab for trigger completion with characters ahead and navigate.
"" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
"" other plugin before putting this into your config.
"inoremap <silent><expr> <TAB>
"      \ pumvisible() ? "\<C-n>" :
"      \ <SID>check_back_space() ? "\<TAB>" :
"      \ coc#refresh()
"inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

"function! s:check_back_space() abort
"  let col = col('.') - 1
"  return !col || getline('.')[col - 1]  =~# '\s'
"endfunction

"" Use <c-space> to trigger completion.
"inoremap <silent><expr> <c-space> coc#refresh()

"" Formatting selected code.
"xmap <leader>f  <Plug>(coc-format-selected)
"nmap <leader>f  <Plug>(coc-format-selected)

"augroup mygroup
"  autocmd!
"  " Setup formatexpr specified filetype(s).
"  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
"  " Update signature help on jump placeholder.
"  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
"augroup end

"" Add `:Format` command to format current buffer.
"command! -nargs=0 Format :call CocAction('format')

"" Add `:Fold` command to fold current buffer.
"command! -nargs=? Fold :call     CocAction('fold', <f-args>)

"" Add `:OR` command for organize imports of the current buffer.
"command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

"" Symbol renaming.
"nmap <leader>rn <Plug>(coc-rename)

"" GoTo code navigation.
"nmap <silent> gd <Plug>(coc-definition)
"nmap <silent> gy <Plug>(coc-type-definition)
"nmap <silent> gi <Plug>(coc-implementation)
"nmap <silent> gr <Plug>(coc-references)

"" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
"" position. Coc only does snippet and additional edit on confirm.
"" <cr> could be remapped by other vim plugin, try `:verbose imap <CR>`.
"" if exists('*complete_info')
""   inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
"" else
""   inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
"" endif

"" Highlight the symbol and its references when holding the cursor.
"autocmd CursorHold * silent call CocActionAsync('highlight')

"" Add (Neo)Vim's native statusline support.
"" NOTE: Please see `:h coc-status` for integrations with external plugins that
"" provide custom statusline: lightline.vim, vim-airline.
"set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

"" Use autocmd to force lightline update.
"autocmd User CocStatusChange,CocDiagnosticChange call lightline#update()

"" Lightline mods for CoC compatibility
"" Todo: Fix ale linter icons
"let g:lightline = {
"      \ 'colorscheme': 'gruvbox',
"      \ 'active': {
"      \   'left': [ [ 'mode', 'paste' ],
"      \             [ 'gitbranch', 'filename', 'readonly', 'cocstatus', 'currentfunction', 'modified' ] ],
"      \   'right': [ [ 'lineinfo' ],
"      \              [ 'percent' ],
"      \              [ 'linter_checking', 'linter_errors', 'linter_warnings', 'linter_infos', 'linter_ok', 'wordcount' , 'filetype', 'fileencoding'] ]
"      \ },
"      \ 'component_function': {
"      \   'filename': 'LightlineFilename',
"      \   'cocstatus': 'coc#status',
"      \   'currentfunction': 'CocCurrentFunction',
"      \   'gitbranch': 'LightlineFugitive',
"      \   'readonly': 'LightlineReadonly',
"      \   'wordcount': 'WordCount'
"      \ },
"      \ }

"	function! LightlineReadonly()
"		return &readonly ? '?' : ''
"	endfunction
"	function! LightlineFugitive()
"		if exists('*FugitiveHead')
"			let branch = FugitiveHead()
"			return branch !=# '' ? '?'.branch : ''
"		endif
"		return ''
"	endfunction

"function! LightlineFilename()
"  return expand('%:t') !=# '' ? @% : '[No Name]'
"endfunction

"function! CocCurrentFunction()
"    return get(b:, 'coc_current_function', '')
"endfunction

"let g:lightline#ale#indicator_checking = "\uf110"
"let g:lightline#ale#indicator_infos = "\uf129"
"let g:lightline#ale#indicator_warnings = "\uf071"
"let g:lightline#ale#indicator_errors = "\uf05e"
"let g:lightline#ale#indicator_ok = "\uf00c"

"let g:lightline.component_expand = {
"      \  'linter_checking': 'lightline#ale#checking',
"      \  'linter_infos': 'lightline#ale#infos',
"      \  'linter_warnings': 'lightline#ale#warnings',
"      \  'linter_errors': 'lightline#ale#errors',
"      \  'linter_ok': 'lightline#ale#ok',
"      \ }

" let g:lightline.component_type = {
"       \     'linter_checking': 'right',
"       \     'linter_infos': 'right',
"       \     'linter_warnings': 'warning',
"       \     'linter_errors': 'error',
"       \     'linter_ok': 'right',
"       \ }
" --------------------------------

" --------------------------------

" <vim-markdown>

set conceallevel=2
let g:vim_markdown_math = 1
let g:vim_markdown_frontmatter = 1
let g:vim_markdown_toml_frontmatter = 1
let g:vim_markdown_json_frontmatter = 1
let g:vim_markdown_strikethrough = 1
" --------------------------------

" <Mundo-tree>

nnoremap <leader>u :MundoToggle<CR>
" --------------------------------

" <Startify>

nnoremap <leader>S :Startify<CR>
"let g:startify_session_dir = '~/sessions'
let g:startify_change_to_dir = 1 " When opening a file or bookmark, change to its directory.
let g:startify_files_number = 5 " Max. number of files to show

" Start indices from 1
let g:startify_custom_indices = map(range(1,100), 'string(v:val)')

" Deal with the list that is going to be show by Startify

" Run startify on new tabs
if has('nvim')
  autocmd TabNewEntered * Startify
else
  autocmd BufWinEnter *
        \ if !exists('t:startify_new_tab')
        \     && empty(expand('%'))
        \     && empty(&l:buftype)
        \     && &l:modifiable |
        \   let t:startify_new_tab = 1 |
        \   Startify |
        \ endif
endif

" --------------------------------

" <whichkey>

nnoremap <silent> <leader> :WhichKey '<Space>'<CR>
" --------------------------------

" <gitgutter>

nmap ghs <Plug>(GitGutterStageHunk)
nmap ghu <Plug>(GitGutterUndoHunk)
nmap ghp <Plug>(GitGutterPreviewHunk)
" --------------------------------

" <incsearch>

"map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)
" automatic nohlsearch
let g:incsearch#auto_nohlsearch = 1
map n  <Plug>(incsearch-nohl-n)
map N  <Plug>(incsearch-nohl-N)
map *  <Plug>(incsearch-nohl-*)
map #  <Plug>(incsearch-nohl-#)
map g* <Plug>(incsearch-nohl-g*)
map g# <Plug>(incsearch-nohl-g#)
" --------------------------------

" <incsearch-easymotion>

map z/ <Plug>(incsearch-easymotion-/)
map z? <Plug>(incsearch-easymotion-?)
map zg/ <Plug>(incsearch-easymotion-stay)

" map <Leader>/ <Plug>(incsearch-easymotion-/)

" map <Leader>g/ <Plug>(incsearch-easymotion-stay)
" --------------------------------

" <bullets.vim>
let g:bullets_enabled_file_types = [
    \ 'markdown',
    \ 'text',
    \ 'gitcommit'
    \]
" --------------------------------

" <undotree>
nnoremap <leader>u :UndotreeToggle<CR>

" <vimwiki>
let g:vimwiki_list = [{'path': '~/MEGA/Notes/vimwiki/', 'path_html': '~/MEGA/Notes/vimwiki_html'}]
